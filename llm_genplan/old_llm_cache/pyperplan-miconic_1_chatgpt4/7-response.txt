def get_plan(objects, init, goal):
    passengers = {p for p, t in objects if t == 'passenger'}
    floors = sorted({f for f, t in objects if t == 'floor'})
    lift_at = [f for f in floors if ('lift-at', f) in init][0]
    origins = {p: f for p, f in [(x[1], x[2]) for x in init if x[0] == 'origin']}
    destinations = {p: f for p, f in [(x[1], x[2]) for x in init if x[0] == 'destin']}
    
    plan = []
    direction = 1  # 1: up, -1: down
    served = set()

    while served != goal:
        # Check for boarding passengers
        for p, o in origins.items():
            if o == lift_at and ('served', p) not in served:
                plan.append(('board', lift_at, p))

        # Check for departing passengers
        for p, d in destinations.items():
            if d == lift_at and ('served', p) not in served:
                plan.append(('depart', lift_at, p))
                served.add(('served', p))

        if direction == 1:
            next_floor = min([f for f in floors if f > lift_at], default=None)
        else:
            next_floor = max([f for f in floors if f < lift_at], default=None)

        if next_floor is None:
            direction *= -1
            continue

        # Move lift to the next floor
        plan.append(('up' if direction == 1 else 'down', lift_at, next_floor))
        lift_at = next_floor

    return plan
