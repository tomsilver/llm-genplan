def get_floors(objects):
    return sorted([obj for obj, obj_type in objects if obj_type == 'floor'])

def get_passengers(objects):
    return [obj for obj, obj_type in objects if obj_type == 'passenger']

def get_lift_position(init):
    for atom in init:
        if atom[0] == 'lift-at':
            return atom[1]
    return None

def passenger_origin(init, passenger):
    for atom in init:
        if atom[0] == 'origin' and atom[1] == passenger:
            return atom[2]
    return None

def passenger_destination(init, passenger):
    for atom in init:
        if atom[0] == 'destin' and atom[1] == passenger:
            return atom[2]
    return None

def get_plan(objects, init, goal):
    floors = get_floors(objects)
    passengers = get_passengers(objects)
    lift_pos = get_lift_position(init)
    plan = []
    
    direction = 1  # 1 for up, -1 for down
    
    while not all(('served', p) in goal for p in passengers):
        current_floor = lift_pos
        next_floor = floors[min(max(0, floors.index(current_floor) + direction), len(floors) - 1)]

        for p in passengers:
            if ('served', p) not in goal:
                origin = passenger_origin(init, p)
                destin = passenger_destination(init, p)

                if lift_pos == origin:
                    plan.append(('board', lift_pos, p))
                    goal.add(('boarded', p))

                if lift_pos == destin and ('boarded', p) in goal:
                    plan.append(('depart', lift_pos, p))
                    goal.add(('served', p))

        if lift_pos != next_floor:
            plan.append(('up' if direction == 1 else 'down', lift_pos, next_floor))
            lift_pos = next_floor
        else:
            direction = -direction

    return plan
