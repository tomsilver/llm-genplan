def get_plan(objects, init, goal):
    passengers = [obj for obj in objects if obj[1] == "passenger"]
    floors = [obj for obj in objects if obj[1] == "floor"]
    lift_at_floor = [atom for atom in init if atom[0] == "lift-at"][0][1]
    
    origin = {}
    destin = {}
    
    for atom in init:
        if atom[0] == "origin":
            origin[atom[1]] = atom[2]
        elif atom[0] == "destin":
            destin[atom[1]] = atom[2]
    
    plan = []
    
    # Sort floors in ascending order
    sorted_floors = sorted(floors, key=lambda x: int(x[0][1:]))
    
    while not all(('served', passenger[0]) in goal for passenger in passengers):
        # Move up
        for i in range(len(sorted_floors) - 1):
            current_floor = sorted_floors[i][0]
            next_floor = sorted_floors[i + 1][0]
            plan.append(('up', current_floor, next_floor))
            lift_at_floor = next_floor

            # Board and depart passengers
            for passenger in passengers:
                if origin[passenger[0]] == lift_at_floor:
                    plan.append(('board', lift_at_floor, passenger[0]))
                if destin[passenger[0]] == lift_at_floor:
                    plan.append(('depart', lift_at_floor, passenger[0]))
                    goal.add(('served', passenger[0]))

        # Move down
        for i in range(len(sorted_floors) - 1, 0, -1):
            current_floor = sorted_floors[i][0]
            next_floor = sorted_floors[i - 1][0]
            plan.append(('down', current_floor, next_floor))
            lift_at_floor = next_floor

            # Board and depart passengers
            for passenger in passengers:
                if origin[passenger[0]] == lift_at_floor:
                    plan.append(('board', lift_at_floor, passenger[0]))
                if destin[passenger[0]] == lift_at_floor:
                    plan.append(('depart', lift_at_floor, passenger[0]))
                    goal.add(('served', passenger[0]))

    return plan
